{"ast":null,"code":"var _jsxFileName = \"/Users/dangngo/Desktop/aa/src/components/Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport Img from \"../img/img.png\";\nimport Attach from \"../img/attach.png\";\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { useState } from 'react';\nimport { async } from '@firebase/util';\nimport { arrayUnion, doc, Timestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from \"uuid\";\nimport { ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid);\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      uploadTask.on(error => {\n        setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateProfile(res.user, {\n            displayName,\n            photoURL: downloadURL\n          });\n          await setDoc(doc(db, \"users\", res.user.uid), {\n            uid: res.user.uid,\n            displayName,\n            email,\n            photoURL: downloadURL\n          });\n          await setDoc(doc(db, \"userChats\", res.user.uid), {});\n          navigate(\"/\");\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid,\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type something...\",\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Attach,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: \"none\"\n        },\n        id: \"file\",\n        onChange: e => setImg(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Img,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"MzmvNsqaGuEtok3XCjZnq/CgKe0=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/dangngo/Desktop/aa/src/components/Input.jsx"],"names":["React","useContext","Img","Attach","AuthContext","ChatContext","useState","async","arrayUnion","doc","Timestamp","updateDoc","db","storage","v4","uuid","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","data","handleSend","storageRef","uploadTask","on","error","setErr","getDownloadURL","snapshot","then","downloadURL","updateProfile","res","user","displayName","photoURL","setDoc","uid","email","navigate","chatId","messages","id","senderId","date","now","e","target","value","display","files"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport Img from \"../img/img.png\";\nimport Attach from \"../img/attach.png\";\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { useState } from 'react';\nimport { async } from '@firebase/util';\nimport { arrayUnion, doc, Timestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from \"uuid\";\nimport { ref, uploadBytesResumable } from 'firebase/storage';\n\nconst Input = () => {\nconst [text, setText] = useState(\"\")\nconst [img, setImg] = useState(null)\n\n\n  const {currentUser} = useContext(AuthContext)\n  const {data} = useContext(ChatContext)\n\n  const handleSend =async ()=>{\n\n    if(img){\n\n      const storageRef = ref(storage, uuid);\n\n      const uploadTask = uploadBytesResumable(storageRef, img);\n\n      uploadTask.on(\n        (error) => {\n          setErr(true)\n        },\n        () => {\n\n          getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n            await updateProfile(res.user, {\n              displayName,\n              photoURL: downloadURL,\n\n            });\n            await setDoc(doc(db, \"users\", res.user.uid), {\n              uid: res.user.uid,\n              displayName,\n              email,\n              photoURL: downloadURL\n            })\n\n            await setDoc(doc(db, \"userChats\", res.user.uid), {});\n            navigate(\"/\");\n\n          });\n        }\n      );\n\n\n    }else{\n      await updateDoc(doc(db,\"chats\", data.chatId),{\n        messages: arrayUnion({\n          id: uuid,\n          text,\n          senderId:currentUser.uid,\n          date: Timestamp.now(),\n        })\n      })\n    }\n  }\n  return (\n    <div className='input'>\n      <input \n      type= \"text\" \n      placeholder =\"Type something...\" \n      onChange={e=>setText(e.target.value)}\n      />\n      <div className=\"send\">\n        <img src={Attach} alt=\"\" />\n        <input \n        type=\"file\" \n        style={{display:\"none\"}} \n        id=\"file\" \n        onChange={e=>setImg(e.target.files[0])}\n        />\n        <label htmlFor=\"file\">\n          <img src={Img} alt=\"\" />\n        </label>\n        <button onClick={handleSend}>Send</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Input\n"]},"metadata":{},"sourceType":"module"}